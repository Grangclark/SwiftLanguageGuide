import UIKit

var greeting = "Hello, playground"


// 2025/09/08[月]
// メソッド (Methods)
// インスタンスメソッド(Instance Methods)
// インスタンスは、特定のクラス、構造体、または列挙型のインスタンスに属する関数です。
// それらは、インスタンスプロパティにアクセスしたり変更する方法を提供したり、
// インスタンスに関連する機能を提供することによって、そのインスタンスの機能をサポートします。
// Functions(関数)で説明されているように、インスタンスメソッドの構文は関数とまったく同じです。

// インスタンスメソッドは、それが属する型の開き括弧({)と閉じ括弧(})内に記述します。
// インスタンスメソッドは、その型の他の全てのインスタンスメソッドおよびプロパティに暗黙的にアクセスできます。
// インスタンスメソッドは、それが属する型の特定のインスタンスでのみ呼び出すことができます。
// 既存のインスタンスがなければ、単独で呼び出すことはできません。

// アクションが発生した回数をカウントするために使用できる、シンプルな Counter クラスを定義する例を次に示します:
class Counter {
    var count = 0
    func increment() {
        count += 1
    }
    func increment(by amount: Int) {
        count += amount
    }
    func reset() {
        count = 0
    }
}

// Counter クラスは 3 つのインスタンスメソッドを定義します。
// increment() は、カウンタを 1 ずつインクリメントします
// increment(by: Int) は、指定された整数分だけカウンタをインクリメントします
// reset() は、カウンタを 0 にリセットします



// 2025/09/09[火]
// Counter クラスは、現在のカウンタ値を追跡するために変数プロパティ count も宣言しています
// プロパティと同じドット構文でインスタンスメソッドを呼び出します。
let counter = Counter()
// counter の初期値は 0
counter.increment()
// counter の値は 1
counter.increment(by: 5)
// counter の値は 6
counter.reset()
// counter の値は 0



// 2025/09/10[水]
// self プロパティ(The self Property)
// 型の全てのインスタンスには、インスタンスそれ自体を表す self と呼ばれる暗黙のプロパティがあります。
// 自身のインスタンスメソッド内で現在のインスタンスを参照するには、self プロパティを使用します。
// 上記の例の increment() メソッドは、次のように記述できます:
func increment() {
    self.count += 1
}







