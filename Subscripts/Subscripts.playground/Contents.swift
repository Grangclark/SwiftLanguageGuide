import UIKit

var greeting = "Hello, playground"

// 2025/09/21[日]
// サブスクリプト(Subscripts)
// コレクションの要素にアクセスする。

// クラス、構造体、および列挙型は、コレクション、リスト、
// またはシーケンスの要素にアクセスするためのショートカットとしてサブスクリプトを定義できます。
// サブスクリプトを使用すると、インデックスを使って値を設定および取得でき、設定と取得に個別のメソッドを必要としません。
// 例えば、Array インスタンスの要素には someArray[index] としてアクセスし、
// Dictionary インスタンスの要素には someDictionary[key] としてアクセスします。

// 単一の型に対して複数のサブスクリプトを定義でき、使用する適切なサブスクリプトのオーバーロードは、
// サブスクリプトに渡すインデックスの型に基づいて選択されます。
// サブスクリプトは 1 つの次元に限定されず、
// カスタムの型のニーズに合わせて複数の入力パラメータでサブスクリプトを定義することもできます。

// サブスクリプト構文(Subscript Syntax)
// サブスクリプトを使用すると、インスタンス名の後に 1 つ以上の値を角括弧([])で囲むことで、型のインスタンスを検索できます。
// それらの構文は、インスタンスメソッドの構文と計算プロパティの構文の両方に似ています。
// インスタンスメソッドと同じ方法で、subscript キーワードを使用してサブスクリプト定義を記述し、
// 1 つ以上の入力パラメータと戻り値の型を指定します。
// インスタンスメソッドとは異なり、サブスクリプトは読み取り/書き込みまたは読み取り専用にすることができます。
// この挙動は、計算プロパティの場合と同じ方法で get/set とやり取りをします。
subscript(index: Int) -> Int {
    get {
        // ここで適切な値を返します
    }
    set(newValue) {
        // ここで適切な値を設定するアクションをします
    }
}

// newValueの型は、サブスクリプトの戻り値と同じです。
// 計算プロパティと同様に、set の (newValue) パラメータを指定しないこともできます。
// 自分で設定しない場合、newValue というデフォルトのパラメータが set に提供されます。



// 2025/09/22[月]
// 読み取り専用の計算プロパティと同様に、get キーワードとその中括弧({})を削除することで、
// 読み取り専用のサブスクリプトの宣言を簡単にできます:
subscript(index: Int) -> Int {
    // ここで適切な値を返します
}



// 2025/09/23[火]
// これは、整数の n 倍数のテーブルを表す TimesTable 構造体を定義する読み取り専用のサブスクリプトの実装の例です。
struct TimesTable {
    let multiplier: Int
    subscript(index: Int) -> Int {
        return multiplier * index
    }
}
let threeTimesTable = TimesTable(multiplier: 3)
print("six times three is \(threeTimesTable[6])")
// six times three is 18

// この例では、TimesTable の新しいインスタンスが作成され、3 の倍数テーブルを表します。
// 上記では、インスタンスの multiplier パラメータに使用する値として、構造体のイニシャライザに値 3 を渡しています。

// threeTimesTable[6] で示されているように、サブスクリプトを呼び出すことで threeTimesTable インスタンスの検索を実行できます。
// これは、3 の倍数テーブルの 6 番目のエントリを要求し、値 18、つまり 3 x 6 を返します。



