import UIKit

// 2025/03/14[金]
// 用語(Terminology)
// 演算子は単項(unary)、二項(binary)、三項(ternary)があります

// ・単項演算子は、-a のような単一のターゲットで動作します。前置(prefix)演算子は !b のようにターゲットの直前に置かれ、後置(postfix)演算子は c! のようにターゲットの直後に置かれます
// ・二項演算子は、2 + 3 のように 2 つの値をターゲットで動作します。これは 2 つのターゲットの間に置かれるので中置(infix)演算子です
// ・三項演算子は、3 つの値をターゲットとした演算子です。C 言語と同様に、Swift は 1 つの三項演算子、三項条件演算子しかありません(a ? b : c)

// 演算子が影響を与える値は、オペランドと呼ばれます。1 + 2 という式は、+ が中置演算子で 1 と 2 がオペランドです。

// 代入演算子(Assignment Operator)
// 代入演算子は、例えば a = b とすると、a の値を b の値で初期化、または更新します。
let b = 10
var a = 5
a = b
// a は 10 と等しい

// 代入の右側が複数の値を持つタプルの場合、一度に複数の定数や変数に代入することができます。
let (x, y) = (1, 2)
// x は 1, y は 2 と等しい

// C言語やObjective-C の代入演算子と異なり、Swift の代入演算子は値を返しません。そのため次のようなことはできません。
if x = y {
    // x = y は値を返さないのでエラーになる
}

// 算術演算子(Arithmetic Operators)
// Swift は全ての数値型に対して 4 つの基本的な算術演算子をサポートしています。
// ・加算(+)
// ・減算(-)
// ・乗算(*)
// ・割算(/)
1 + 2      // 3
5 - 3      // 2
2 * 3      // 6
10.0 / 2.5 // 4.0
// C言語やObjective-C と異なり、Swift はデフォルトでオーバーフローはできません。
// a &+ b のようにオーバーフロー演算子(&-)を使用してオーバーフローさせることができます。

// 剰余演算子(Remainder Operator)
// a % b のような剰余演算子は、a の中に b がどのくらい含まれているのかを計算し、その(剰余と呼ばれる)余った値を返します。
9 % 4 // 1

// 単項減算演算子(Unary Minus Operator)
// 数値の記号は、前置の - を使用して切り替えることができます。これは単項減算演算子と呼ばれます。
let three = 3
let minusThree = -three
let plusThree = -minusThree
// 単項演算子(-)は、操作する値の直前にスペースなしで付けます。

// 単項加算演算子(Unary Plus Operator)
// 単項加算演算子(+)は、何も変えずに操作した値を返します。
let minuSix = -6
let alsoMinusSix = +minusSix

