import UIKit

var greeting = "Hello, playground"

// 2025/09/25[木]
// 継承(Inheritance)

// 機能を追加またはオーバーライドするサブクラス。

// クラスは、メソッド、プロパティ、およびその他の特性を別のクラスから継承できます。
// あるクラスが別のクラスを継承する場合、継承するクラスはサブクラスと呼ばれ、継承されるクラスはスーパークラスと呼ばれます。
// 継承は、Swift においてクラスと他の型を区別する重要な挙動です。

// Swift のクラスは、スーパークラスに属するメソッド、プロパティ、およびサブスクリプトを呼び出してアクセスしたり、
// それらのメソッド、プロパティ、およびサブスクリプトの独自のオーバーライドバージョンを提供して挙動を変更できたりします。
// Swift は、オーバーライドしている定義がスーパークラスの定義に一致していることを確認することで、オーバーライドが正しいことを確認します。

// 基本クラスの定義(Defining a Base Class)
// 別のクラスから継承しないクラスは、基本クラスと呼ばれます。

// 以下の例では、Vehicle という基本クラスを定義しています。
// この基本クラスは、currentSpeed と呼ばれる格納プロパティを定義します。
// デフォルト値は 0.0 です(プロパティの型は Double と推論されます)。
// currentSpeed プロパティの値は、description と呼ばれる読み取り専用の String 型の計算プロパティに使用され、乗り物の説明をします。

// Vehicle 基本クラスは、makeNoise と呼ばれるメソッドも定義します。
// このメソッドは、何もしませんが、後で Vehicle のサブクラスによってカスタマイズされます。

class Vehicle {
    var currentSpeed = 0.0
    var description: String {
        return "走行時速 \(currentSpeed) マイル"
    }
    func makeNoise() {
        // 何もしない - 乗り物は必ずしも騒音を出しません
    }
}



// 2025/09/26[金]
// 初期化構文を使用して Vehicle の新しいインスタンスを作成します。これは、型名とそれに続く空の括弧(())として記述されます。
let someVehicle = Vehicle()




// 2025/09/27[土]
// 新しい Vehicle インスタンスを作成したら、その description プロパティにアクセスして、乗り物の現在の速度の人間が読める形式の説明を出力します。
print("乗り物: \(someVehicle.description)")
// 乗り物: 走行時速 0.0 マイル

// Vehicle クラスは、任意の乗り物に共通の特性を定義しますが、そのまま使用されることはあまりありません。
// より有用にするには、より具体的な種類の乗り物を記述する必要があります。


