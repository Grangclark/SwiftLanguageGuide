import UIKit


// 2025/05/02[金]
// コレクション型(Collection Types)
// Swift は、配列、セット、辞書と呼ばれる 3 つの基本的なコレクション型を提供しています。
// 配列は順序が決まったコレクションです。セットは値の重複と順序のないコレクションです。
// 辞書はキーとバリューに関連性を持たせた順序のないコレクションです。
//
// コレクションの可変性(Mutability of Collections)
// もし配列、セット、辞書を変数に代入した場合、作成されたコレクションは可変です。
// つまり、追加、削除、要素の変更など、後々そのコレクションを取り替え(または変更)できます。
// もし配列、セット、辞書を定数に代入した場合、コレクションは不変で、そのサイズや内容を変更できません。
//
// 配列(Arrays)
// 配列は同じ型の値を順序立ったリストの中に保持します。配列の中に同じ値を複数回入れることができます。
//
// 空の配列の作成(Creating an Empty Array)
// Swift で空の配列を作成するには 2 つの方法があります。
// 関数引数や既に型が指定されている変数または定数など、
// コンテキストが既に型情報を提供している場合、
// 空の配列リテラル（[]、空の角括弧のペア）を使用できます。
var someInts: [Int] = []
print("someInts は \(someInts.count) 個の要素を持つ [Int] 型です。")
// someInts は 0 個の要素を持つ [Int] 型です。



// 2025/05/03[土]
// あるいは、要素の型を角括弧で指定し、その後に括弧を付けることで、
// 明示的な初期化構文を使用して特定の型の空の配列を作成することもできます。
// たとえば、次のように [Int]() と記述します。
var someInts: [Int]()
print("someInts は \(someInts.count) 個の要素を持つ [Int] 型です。")
// someInts は 0 個の要素を持つ [Int] 型です。
// どちらも結果は同じです。ただし、空の配列リテラルのほうが短く、たいていは読みやすくなります。
